swagger: "2.0"
info:
  title: "24G API for a video player"
  version: "0.0.0"
paths:
  /pages:
    get:
      summary: "Retrieve all pages"
      produces:
        - "application/json"
      parameters: []
      responses:
        "200":
          description: "Successful dataset"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Page"
        "500":
          description: "An error has occurred"
          schema:
            $ref: "#/definitions/Error"
  /pages/{pageId}:
    get:
      summary: "Retrieve a specific page"
      produces:
        - "application/json"
      parameters:
        - name: "pageId"
          in: "path"
          description: "ID of page"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful dataset"
          schema:
            $ref: "#/definitions/Page"
        "400":
          description: "Invalid page ID supplied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Page not found"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "An error has occurred"
          schema:
            $ref: "#/definitions/Error"      
  /videos:
    get:
      summary: "Retrieve all videos under a specific page"
      produces:
        - "application/json"
      parameters:
        - name: "pageId"
          in: "query"
          description: "Video must belong to a specific page"
          required: false
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful dataset"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Video"
        "400":
          description: "Invalid page ID supplied"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "An error has occurred"
          schema:
            $ref: "#/definitions/Error"
  /videos/{videoId}:
    get:
      summary: "Retrieve a specific video"
      produces:
        - "application/json"
      parameters:
        - name: "videoId"
          in: "path"
          description: "ID of video"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful dataset"
          schema:
            $ref: "#/definitions/Video"
        "400":
          description: "Invalid video ID supplied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Video not found"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "An error has occurred"
          schema:
            $ref: "#/definitions/Error"
  /comments:
    get:
      summary: "Retrieve comments for a video"
      produces:
        - "application/json"
      parameters:
        - name: "videoId"
          in: "query"
          description: "ID of video"
          required: false
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful dataset"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Comment"
        "400":
          description: "Invalid video ID supplied"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "An error has occurred"
          schema:
            $ref: "#/definitions/Error"
    post:
      summary: "Create a comment for a video"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/Comment"
      responses:
        "201":
          description: "Successfully created comment"
          schema:
            $ref: "#/definitions/Comment"
        "400":
          description: "Validation of comment failed"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "An error has occurred"
          schema:
            $ref: "#/definitions/Error"
  /videos/{videoId}/vote/#{vote}:
    put:
      summary: "Thumbs up or down for a video"
      parameters:
        - name: "videoId"
          in: "path"
          description: "ID of video"
          required: true
          type: "integer"
          format: "int64"
        - name: "vote"
          in: "path"
          description: "TODO"
          required: true
          type: "string"
          enum: 
            - "thumbs-up"
            - "thumbs-down"
      responses:
        "201":
          description: "Successfully added vote"
        "400":
          description: "Invalid video ID or invalid vote supplied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Video not found"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "An error has occurred"
          schema:
            $ref: "#/definitions/Error"
  /users/{userId}:
    get:
      summary: "Retrieve a specific user"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "TODO"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid user ID supplied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "An error has occurred"
          schema:
            $ref: "#/definitions/Error"
definitions:
  Error:
    type: "object"
    required:
      - "error"
    properties:
      error:
        type: "string"
  Timestamps:
    type: "object"
    required:
      - "createdAt"
    properties:
      createdAt:
        type: "string"
        format: "dateTime"
      updatedAt:
        type: "string"
        format: "dateTime"
  Page:
    allOf:
      - $ref: "#/definitions/Timestamps"
      - type: "object"
        required:
          - "id"
          - "title"
          - "path"
        properties:
          id:
            type: "integer"
            format: "int54"
          title:
            type: "string"
          path:
            type: "string"
  Video:
    allOf:
      - $ref: "#/definitions/Timestamps"
      - type: "object"
        required:
          - "id"
          - "pageId"
          - "title"
          - "uri"
          - "thumbnail"
          - "measurement"
        properties:
          id:
            type: "integer"
            format: "int64"
          pageId:
            type: "integer"
            format: "int64"
          title:
            type: "string"
          uri:
            type: "string"
          thumbnail:
            type: "string"
          measurement:
            $ref: "#/definitions/Measurement"
  Measurement:
    type: "object"
    required:
      - "views"
      - "thumbsUp"
      - "thumbsDown"
    properties:
      views:
        type: "integer"
        format: "int32"
      thumbsUp:
        type: "integer"
        format: "int32"
      thumbsDown:
        type: "integer"
        format: "int32"
  Comment:
    allOf:
      - $ref: "#/definitions/Timestamps"
      - type: "object"
        required:
          - "videoId"
          - "text"
          - "user"
        properties:
          id:
            type: "integer"
            format: "int64"
          videoId:
            type: "integer"
            format: "int64"
          text:
            type: "string"
          user:
            $ref: "#/definitions/User"
        
  User:
    allOf:
      - $ref: "#/definitions/Timestamps"
      - type: "object"
        required:
          - "id"
          - "firstName"
          - "lastName"
        properties:
          id:
            type: "integer"
            format: "int64"
          firstName:
            type: "string"
          lastName:
            type: "string"
